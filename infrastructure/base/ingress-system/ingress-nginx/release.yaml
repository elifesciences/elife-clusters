apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: ingress-nginx
  namespace: ingress-system
spec:
  releaseName: ingress-nginx
  chart:
    spec:
      chart: ingress-nginx
      sourceRef:
        kind: HelmRepository
        name: ingress-nginx
      version: "4.10.0"
  interval: 1h0m0s
  values:
    controller:
      watchIngressWithoutClass: true
      allowSnippetAnnotations: true
      service:
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
          service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
          service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
          service.beta.kubernetes.io/aws-load-balancer-type: external
          service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
          service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
          service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "creator=ingress,cluster=${cluster_name}"
          service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
      config:
        use-forwarded-headers: "true"
        use-proxy-protocol: "true"
        use-http2: "true"
        log-format-escape-json: "true"
        log-format-upstream: '{"timestamp": "$time_iso8601", "requestID": "$req_id", "proxyUpstreamName": "$proxy_upstream_name", "proxyAlternativeUpstreamName": "$proxy_alternative_upstream_name", "proxyProtocolAddr":"$proxy_protocol_addr", "proxyProtocolPort":"$proxy_protocol_port", "upstreamStatus": "$upstream_status", "upstreamAddr": "$upstream_addr","httpRequest":{"requestMethod": "$request_method", "requestUrl": "$host$request_uri", "status": $status,"requestSize": "$request_length", "responseSize": "$upstream_response_length", "userAgent": "$http_user_agent", "remoteIp": "$remote_addr", "referer": "$http_referer", "latency": "$upstream_response_time s", "protocol":"$server_protocol", "xForwardedFor": "$http_x_forwarded_for", "xOriginalForwardedFor": "$http_x_original_forwarded_for", "xForwardedHost": "$http_x_forwarded_host"}}'
      # metrics:
      #   enabled: "true"
      #   serviceMonitor:
      #     enabled: "true"
      podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 100m
          memory: 150Mi
      replicaCount: ${ingress_nginx_replicas:=2}

